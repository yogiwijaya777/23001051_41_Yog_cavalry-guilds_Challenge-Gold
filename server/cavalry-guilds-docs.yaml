openapi: 3.0.0
info:
  title: cavalry-guilds
  contact: {}
  version: '1.0'
servers:
- url: http://localhost:3000/
  variables: {}
paths:
  /auth/register:
    post:
      tags:
      - Auth
      summary: Register
      operationId: Register
      parameters: []
      requestBody:
        description: ''
        content:
          application/json:
            schema:
              allOf:
              - $ref: '#/components/schemas/RegisterRequest'
              - example:
                  name: admin
                  email: admintester1@gmail.com
                  password: rahasia1
            example:
              name: admin
              email: admintester1@gmail.com
              password: rahasia1
        required: true
      responses:
        '200':
          description: ''
          headers: {}
      deprecated: false
      security: []
  /auth/login:
    post:
      tags:
      - Auth
      summary: Login
      operationId: Login
      parameters: []
      requestBody:
        description: ''
        content:
          application/json:
            schema:
              allOf:
              - $ref: '#/components/schemas/LoginUserRequest'
              - example:
                  email: usertester@gmail.com
                  password: rahasia1
            example:
              email: usertester@gmail.com
              password: rahasia1
        required: true
      responses:
        '200':
          description: ''
          headers: {}
      deprecated: false
      security: []
  /auth/logout:
    post:
      tags:
      - Auth
      summary: Logout
      operationId: Logout
      parameters: []
      requestBody:
        description: ''
        content:
          application/json:
            schema:
              allOf:
              - $ref: '#/components/schemas/LogoutRequest'
              - example:
                  refreshToken: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJhOGU0NjU3Yi1iZWMyLTQxZTktOGM2OC0yOGRkNzY1OTlmNmYiLCJpYXQiOjE3MDgwODM1MTQsImV4cCI6MTcxMDY3NTUxNCwidHlwZSI6InJlZnJlc2gifQ.U9JDNZyFgxCRVw2cTw6BObZbuhLGjjsEejg2xcMmHH0
            example:
              refreshToken: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJhOGU0NjU3Yi1iZWMyLTQxZTktOGM2OC0yOGRkNzY1OTlmNmYiLCJpYXQiOjE3MDgwODM1MTQsImV4cCI6MTcxMDY3NTUxNCwidHlwZSI6InJlZnJlc2gifQ.U9JDNZyFgxCRVw2cTw6BObZbuhLGjjsEejg2xcMmHH0
        required: true
      responses:
        '200':
          description: ''
          headers: {}
      deprecated: false
  /auth/refresh-tokens:
    post:
      tags:
      - Auth
      summary: Refresh Tokens
      operationId: RefreshTokens
      parameters: []
      requestBody:
        description: ''
        content:
          application/json:
            schema:
              allOf:
              - $ref: '#/components/schemas/RefreshTokensRequest'
              - example:
                  refreshToken: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJmM2VjNzQ5NC0yNTgyLTQ4NDYtYjFiYy01Y2ZlNzVkODI1NjUiLCJpYXQiOjE3MDgwODUzOTgsImV4cCI6MTcxMDY3NzM5OCwidHlwZSI6InJlZnJlc2gifQ.srAJ2zrrfoUH4j8YqlVvWmTHUdA4p97xBC3KafzeqNM
            example:
              refreshToken: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJmM2VjNzQ5NC0yNTgyLTQ4NDYtYjFiYy01Y2ZlNzVkODI1NjUiLCJpYXQiOjE3MDgwODUzOTgsImV4cCI6MTcxMDY3NzM5OCwidHlwZSI6InJlZnJlc2gifQ.srAJ2zrrfoUH4j8YqlVvWmTHUdA4p97xBC3KafzeqNM
        required: true
      responses:
        '200':
          description: ''
          headers: {}
      deprecated: false
      security:
      - bearer: []
  /users:
    post:
      tags:
      - User
      summary: Create User
      operationId: CreateUser
      parameters: []
      requestBody:
        description: ''
        content:
          application/json:
            schema:
              allOf:
              - $ref: '#/components/schemas/CreateUserRequest'
              - example:
                  name: dqdadad
                  email: addAad@gmail.com
                  password: rahasia1
                  role: user
            example:
              name: dqdadad
              email: addAad@gmail.com
              password: rahasia1
              role: user
        required: true
      responses:
        '200':
          description: ''
          headers: {}
      deprecated: false
      security:
      - bearer: []
    get:
      tags:
      - User
      summary: Get All Users
      operationId: GetAllUsers
      parameters:
      - name: name
        in: query
        description: ''
        required: true
        style: form
        explode: true
        schema:
          type: string
          example: z
      - name: role
        in: query
        description: ''
        required: true
        style: form
        explode: true
        schema:
          type: string
          example: user
      - name: sort
        in: query
        description: ''
        required: true
        style: form
        explode: true
        schema:
          type: string
          example: name:asc
      - name: limit
        in: query
        description: ''
        required: true
        style: form
        explode: true
        schema:
          type: integer
          format: int32
          example: 5
      - name: page
        in: query
        description: ''
        required: true
        style: form
        explode: true
        schema:
          type: integer
          format: int32
          example: 5
      responses:
        '200':
          description: ''
          headers: {}
      deprecated: false
      security:
      - bearer: []
  /users/{userId}/:
    parameters:
      - in: path
        name: userId
        schema:
          type: string
        required: true
        description: The User ID
    get:
      tags:
      - User
      summary: Get User By Id
      operationId: GetUserById
      parameters: []
      responses:
        '200':
          description: ''
          headers: {}
      deprecated: false
      security:
      - bearer: []
    patch:
      tags:
      - User
      summary: Update Users
      operationId: UpdateUsers
      parameters: []
      requestBody:
        description: ''
        content:
          application/json:
            schema:
              allOf:
              - $ref: '#/components/schemas/UpdateUsersRequest'
              - example:
                  name: budAAi
            example:
              name: budAAi
        required: true
      responses:
        '200':
          description: ''
          headers: {}
      deprecated: false
      security:
      - bearer: []
    delete:
      tags:
      - User
      summary: Delete User
      operationId: DeleteUser
      parameters: []
      responses:
        '200':
          description: ''
          headers: {}
      deprecated: false
      security:
      - bearer: []
  /decks:
    post:
      tags:
      - Deck
      summary: Create Deck
      operationId: CreateDeck
      parameters: []
      requestBody:
        description: ''
        content:
          application/json:
            schema:
              allOf:
              - $ref: '#/components/schemas/CreateDeckRequest'
              - example:
                  name: Exosister King
                  description: owwwaw
                  archetypeId: 5100e7fd-274c-47d3-9e66-cd205c03fb20
            example:
              name: Exosister King
              description: owwwaw
              archetypeId: 5100e7fd-274c-47d3-9e66-cd205c03fb20
        required: true
      responses:
        '200':
          description: ''
          headers: {}
      deprecated: false
      security:
      - bearer: []
    get:
      tags:
      - Deck
      summary: Get All Decks
      operationId: GetAllDecks
      parameters:
      - name: name
        in: query
        description: ''
        required: true
        style: form
        explode: true
        schema:
          type: string
          example: ex
      responses:
        '200':
          description: ''
          headers: {}
      deprecated: false
      security:
      - bearer: []
  /decks/{deckId}/:
    parameters:
      - in: path
        name: deckId
        schema:
          type: string
        required: true
        description: The Deck ID
    get:
      tags:
      - Deck
      summary: Get Deck
      operationId: GetDeck
      parameters: []
      responses:
        '200':
          description: ''
          headers: {}
      deprecated: false
      security:
      - bearer: []
    patch:
      tags:
      - Deck
      summary: Update Deck
      operationId: UpdateDeck
      parameters: []
      requestBody:
        description: ''
        content:
          application/json:
            schema:
              allOf:
              - $ref: '#/components/schemas/UpdateDeckRequest'
              - example:
                  name: Exosister rush
                  description: owwwaw
                  archetypeId: 5100e7fd-274c-47d3-9e66-cd205c03fb20
            example:
              name: Exosister rush
              description: owwwaw
              archetypeId: 5100e7fd-274c-47d3-9e66-cd205c03fb20
        required: true
      responses:
        '200':
          description: ''
          headers: {}
      deprecated: false
      security:
      - bearer: []
    delete:
      tags:
      - Deck
      summary: Delete Deck
      operationId: DeleteDeck
      parameters: []
      responses:
        '200':
          description: ''
          headers: {}
      deprecated: false
      security:
      - bearer: []
  /users/{userId}/decks:
    parameters:
      - in: path
        name: userId
        schema:
          type: string
        required: true
        description: The User ID
    get:
      tags:
      - Deck
      summary: Get Decks By User
      operationId: GetDecksByUser
      parameters: []
      responses:
        '200':
          description: ''
          headers: {}
      deprecated: false
      security:
      - bearer: []
  /archetypes/{archetypeId}/decks:
    parameters:
      - in: path
        name: archetypeId
        schema:
          type: string
        required: true
        description: The Archetype ID
    get:
      tags:
      - Deck
      summary: Get Decks By Archetype
      operationId: GetDecksByArchetype
      parameters:
      - name: name
        in: query
        description: ''
        required: true
        style: form
        explode: true
        schema:
          type: string
      responses:
        '200':
          description: ''
          headers: {}
      deprecated: false
      security:
      - bearer: []
  /archetypes:
    post:
      tags:
      - Archetype
      summary: Create Archetype
      operationId: CreateArchetype
      parameters: []
      requestBody:
        description: ''
        content:
          application/json:
            schema:
              allOf:
              - $ref: '#/components/schemas/CreateArchetypeRequest'
              - example:
                  name: Mannadium
            example:
              name: Mannadium
        required: true
      responses:
        '200':
          description: ''
          headers: {}
      deprecated: false
      security:
      - bearer: []
    get:
      tags:
      - Archetype
      summary: Get All Archetypes
      operationId: GetAllArchetypes
      parameters: []
      responses:
        '200':
          description: ''
          headers: {}
      deprecated: false
      security:
      - bearer: []
  /archetypes/{archetypeId}:
    parameters:
      - in: path
        name: archetypeId
        schema:
          type: string
        required: true
        description: The archetype ID
    get:
      tags:
      - Archetype
      summary: Get Archetype
      operationId: GetArchetype
      parameters: []
      responses:
        '200':
          description: ''
          headers: {}
      deprecated: false
      security:
      - bearer: []
    patch:
      tags:
      - Archetype
      summary: Update Archetype
      operationId: UpdateArchetype
      parameters: []
      requestBody:
        description: ''
        content:
          application/json:
            schema:
              allOf:
              - $ref: '#/components/schemas/UpdateArchetypeRequest'
              - example:
                  name: Kashtira 1
            example:
              name: Kashtira 1
        required: true
      responses:
        '200':
          description: ''
          headers: {}
      deprecated: false
      security:
      - bearer: []
    delete:
      tags:
      - Archetype
      summary: Delete Archetype
      operationId: DeleteArchetype
      parameters: []
      responses:
        '200':
          description: ''
          headers: {}
      deprecated: false
      security:
      - bearer: []
  /follows:
    post:
      tags:
      - Follow
      summary: Create Follow
      operationId: CreateFollow
      parameters: []
      requestBody:
        description: ''
        content:
          application/json:
            schema:
              allOf:
              - $ref: '#/components/schemas/CreateFollowRequest'
              - example:
                  followingId: 72393acd-9302-4f4d-8db2-9c345b4591f6
            example:
              followingId: 72393acd-9302-4f4d-8db2-9c345b4591f6
        required: true
      responses:
        '200':
          description: ''
          headers: {}
      deprecated: false
      security:
      - bearer: []
  /follows/{followId}:
    parameters:
      - in: path
        name: followId
        schema:
          type: string
        required: true
        description: The Follow ID
    delete:
      tags:
      - Follow
      summary: Delete Follow
      operationId: DeleteFollow
      parameters: []
      responses:
        '200':
          description: ''
          headers: {}
      deprecated: false
      security:
      - bearer: []
  /users/{userId}/followers:
    parameters:
      - in: path
        name: userId
        schema:
          type: string
        required: true
        description: The User ID
    get:
      tags:
      - Follow
      summary: Get All Followers
      operationId: GetAllFollowers
      parameters: []
      responses:
        '200':
          description: ''
          headers: {}
      deprecated: false
      security:
      - bearer: []
  /users/{userId}/followings:
    parameters:
      - in: path
        name: userId
        schema:
          type: string
        required: true
        description: The User ID
    get:
      tags:
      - Follow
      summary: Get All Followings
      operationId: GetAllFollowings
      parameters: []
      responses:
        '200':
          description: ''
          headers: {}
      deprecated: false
      security:
      - bearer: []
  /users/{userId}/favorite-decks:
    parameters:
      - in: path
        name: userId
        schema:
          type: string
        required: true
        description: The User ID
    get:
      tags:
      - Favorite Deck
      summary: Get User Favorited Decks
      operationId: GetUserFavoritedDecks
      parameters: []
      responses:
        '200':
          description: ''
          headers: {}
      deprecated: false
      security:
      - bearer: []
  /decks/{deckId}/followers:
    parameters:
      - in: path
        name: deckId
        schema:
          type: string
        required: true
        description: The Deck ID  
    get:
      tags:
      - Favorite Deck
      summary: Get Follower Deck by Deck
      operationId: GetFollowerDeckbyDeck
      parameters: []
      responses:
        '200':
          description: ''
          headers: {}
      deprecated: false
      security:
      - bearer: []
  /favorite-decks:
    post:
      tags:
      - Favorite Deck
      summary: Create Favorite Deck
      operationId: CreateFavoriteDeck
      parameters: []
      requestBody:
        description: ''
        content:
          application/json:
            schema:
              allOf:
              - $ref: '#/components/schemas/CreateFavoriteDeckRequest'
              - example:
                  deckId: d36d933c-121b-4368-8e1a-e54b2f723357
            example:
              deckId: d36d933c-121b-4368-8e1a-e54b2f723357
        required: true
      responses:
        '200':
          description: ''
          headers: {}
      deprecated: false
      security:
      - bearer: []
  /favorite-decks/{favoriteDeckId}:
    parameters:
      - in: path
        name: favoriteDeckId
        schema:
          type: string
        required: true
        description: The Favorite Deck ID
    delete:
      tags:
      - Favorite Deck
      summary: Delete Favorite Deck
      operationId: DeleteFavoriteDeck
      parameters: []
      responses:
        '200':
          description: ''
          headers: {}
      deprecated: false
      security:
      - bearer: []
components:
  schemas:
    RegisterRequest:
      title: RegisterRequest
      required:
      - name
      - email
      - password
      type: object
      properties:
        name:
          type: string
        email:
          type: string
        password:
          type: string
      example:
        name: admin
        email: admintester1@gmail.com
        password: rahasia1
    LoginUserRequest:
      title: LoginUserRequest
      required:
      - email
      - password
      type: object
      properties:
        email:
          type: string
        password:
          type: string
      example:
        email: usertester@gmail.com
        password: rahasia1
    LogoutRequest:
      title: LogoutRequest
      required:
      - refreshToken
      type: object
      properties:
        refreshToken:
          type: string
      example:
        refreshToken: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJhOGU0NjU3Yi1iZWMyLTQxZTktOGM2OC0yOGRkNzY1OTlmNmYiLCJpYXQiOjE3MDgwODM1MTQsImV4cCI6MTcxMDY3NTUxNCwidHlwZSI6InJlZnJlc2gifQ.U9JDNZyFgxCRVw2cTw6BObZbuhLGjjsEejg2xcMmHH0
    RefreshTokensRequest:
      title: RefreshTokensRequest
      required:
      - refreshToken
      type: object
      properties:
        refreshToken:
          type: string
      example:
        refreshToken: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJmM2VjNzQ5NC0yNTgyLTQ4NDYtYjFiYy01Y2ZlNzVkODI1NjUiLCJpYXQiOjE3MDgwODUzOTgsImV4cCI6MTcxMDY3NzM5OCwidHlwZSI6InJlZnJlc2gifQ.srAJ2zrrfoUH4j8YqlVvWmTHUdA4p97xBC3KafzeqNM
    CreateUserRequest:
      title: CreateUserRequest
      required:
      - name
      - email
      - password
      - role
      type: object
      properties:
        name:
          type: string
        email:
          type: string
        password:
          type: string
        role:
          type: string
      example:
        name: dqdadad
        email: addAad@gmail.com
        password: rahasia1
        role: user
    UpdateUsersRequest:
      title: UpdateUsersRequest
      required:
      - name
      type: object
      properties:
        name:
          type: string
      example:
        name: budAAi
    CreateDeckRequest:
      title: CreateDeckRequest
      required:
      - name
      - description
      - archetypeId
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        archetypeId:
          type: string
      example:
        name: Exosister King
        description: owwwaw
        archetypeId: 5100e7fd-274c-47d3-9e66-cd205c03fb20
    UpdateDeckRequest:
      title: UpdateDeckRequest
      required:
      - name
      - description
      - archetypeId
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        archetypeId:
          type: string
      example:
        name: Exosister rush
        description: owwwaw
        archetypeId: 5100e7fd-274c-47d3-9e66-cd205c03fb20
    DeleteDeckRequest:
      title: DeleteDeckRequest
      required:
      - name
      - description
      - archetypeId
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        archetypeId:
          type: string
      example:
        name: Exosister Trap
        description: owwwaw
        archetypeId: 5100e7fd-274c-47d3-9e66-cd205c03fb20
    CreateArchetypeRequest:
      title: CreateArchetypeRequest
      required:
      - name
      type: object
      properties:
        name:
          type: string
      example:
        name: Mannadium
    UpdateArchetypeRequest:
      title: UpdateArchetypeRequest
      required:
      - name
      type: object
      properties:
        name:
          type: string
      example:
        name: Kashtira 1
    CreateFollowRequest:
      title: CreateFollowRequest
      required:
      - followingId
      type: object
      properties:
        followingId:
          type: string
      example:
        followingId: 72393acd-9302-4f4d-8db2-9c345b4591f6
    DeleteFollowRequest:
      title: DeleteFollowRequest
      required:
      - followerId
      - followingId
      type: object
      properties:
        followerId:
          type: string
        followingId:
          type: string
      example:
        followerId: f3ec7494-2582-4846-b1bc-5cfe75d82565
        followingId: bf1e6b89-9f4a-481a-b161-79a8fa66fb78
    CreateFavoriteDeckRequest:
      title: CreateFavoriteDeckRequest
      required:
      - deckId
      type: object
      properties:
        deckId:
          type: string
      example:
        deckId: d36d933c-121b-4368-8e1a-e54b2f723357
    DeleteFavoriteDeckRequest:
      title: DeleteFavoriteDeckRequest
      required:
      - followerId
      - followingId
      type: object
      properties:
        followerId:
          type: string
        followingId:
          type: string
      example:
        followerId: f3ec7494-2582-4846-b1bc-5cfe75d82565
        followingId: bf1e6b89-9f4a-481a-b161-79a8fa66fb78
  securitySchemes:
    bearer:
      type: http
      scheme: bearer
security: []
tags:
- name: Auth
- name: User
- name: Deck
- name: Archetype
- name: Follow
- name: Favorite Deck