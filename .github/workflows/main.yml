name: CI/CD
on:
  push:
    branches: [main, staging]

jobs:
  test-build-and-push:
    services:
      postgres:
        image: postgres
        env:
          POSTGRES_PASSWORD: postgres
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - "5432:5432"

    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Install dependencies & Testing Server
        env:
          TEST_DATABASE_URL: postgresql://postgres:postgres@localhost:5432/postgres
          JWT_SECRET: ${{ secrets.JWT_SECRET }}
          JWT_ACCESS_EXPIRATION_MINUTES: ${{ secrets.JWT_ACCESS_EXPIRATION_MINUTES }}
          JWT_REFRESH_EXPIRATION_DAYS: ${{ secrets.JWT_REFRESH_EXPIRATION_DAYS }}
          CLOUD_NAME: ${{ secrets.CLOUD_NAME }}
          CLOUD_API_KEY: ${{ secrets.CLOUD_API_KEY }}
          CLOUD_API_SECRET: ${{ secrets.CLOUD_API_SECRET }}

        run: |
          cd server/
          npm ci
          npx knex migrate:latest --env test
          npm run test

      - name: Install dependencies & Testing Client
        run: |
          cd client/
          npm ci
          npm run test

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and Push Docker Image of Server
        run: |
          TAG="mikailis/cavalry-guilds:server"
          docker build --target production -t $TAG ./server
          docker push $TAG

      - name: Build and Push Docker Image of Client
        run: |
          TAG="mikailis/cavalry-guilds:client"
          if [ "${{ github.ref }}" == "refs/heads/staging" ]; then
            docker build --build-arg REACT_APP_API_URL=${{ secrets.STAGING_REACT_APP_API_URL }} --target production -t $TAG ./client
          else
            docker build --build-arg REACT_APP_API_URL=${{ secrets.REACT_APP_API_URL }} --target production -t $TAG ./client
          fi  
          docker push $TAG

  deployment:
    needs: test-build-and-push
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@master

      - name: SSH into Droplet, pull image, and run container
        uses: appleboy/ssh-action@master
        with:
          host: ${{secrets.DROPLET_SSH_HOST}}
          username: ${{secrets.DROPLET_SSH_USERNAME}}
          key: ${{secrets.DROPLET_SSH_PRIVATE_KEY}}
          script: |
            if [ "${{ github.ref }}" == "refs/heads/staging" ]; then
              cd /staging-app/
              docker compose -f /staging-app/staging-compose.yaml pull
              docker compose -f /staging-app/staging-compose.yaml up -d --build
            else
              cd /app/
              docker compose -f /app/production-compose.yaml pull
              docker compose compose -f /app/production-compose.yaml up -d --build
            fi
